[project]
requires-python = ">=3.12.5"

[tool.poetry]
name = "cauf-evidence"
version = "0.1.0"
description = "An app for ultimate frisbee national association and clubs to manage memberships, fees, transfers, and other administrative tasks efficiently."
authors = ["Marek Dost√°l <dstlmrk@gmail.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.12.5"
django = "^5.1"
gunicorn = "^23.0.0"
django-environ = "^0.11.2"
psycopg2-binary = "^2.9.9"
sentry-sdk = {extras = ["django"], version = "^2.14.0"}
ddtrace = "^2.12.0"
python-json-logger = "^2.0.7"
django-allauth = {extras = ["socialaccount"], version = "^64.2.1"}
django-htmx = "^1.19.0"
django-debug-toolbar = "^4.4.6"
django-crispy-forms = "^2.3"
crispy-bootstrap5 = "^2024.10"
django-guardian = "^2.4.0"
django-rq = "^2.10.2"

[tool.poetry.group.dev.dependencies]
pytest-django = "^4.9.0"
ruff = "^0.6.3"
poethepoet = "^0.28.0"
mypy = "^1.11.2"
django-stubs = "^5.0.4"
pre-commit = "^3.8.0"
factory-boy = "^3.3.1"
pytest-factoryboy = "^2.7.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
django_find_project = false
DJANGO_SETTINGS_MODULE = "ultihub.settings"
pythonpath = ". ultihub"
addopts = ["--import-mode=importlib",]
python_files = ["test_*.py", "*_test.py"]

[tool.ruff]
line-length = 100

[tool.ruff.lint]
select = [
	"I",   # isort
	"E",   # pycodestyle errors
	"W",   # pycodestyle warnings
	"F",   # Pyflakes
	"UP",  # pyupgrade
	"B",   # flake8-bugbear
	"DJ",  # flake8-django
	"SIM", # flake8-simplify
	"T20", # flake8-print
	"PTH", # flake8-pathlib
]

[tool.mypy]
mypy_path = "ultihub"
check_untyped_defs = true
disallow_untyped_defs = true
warn_redundant_casts = true
warn_unreachable = true
warn_unused_ignores = true
ignore_missing_imports = true
strict_optional = true
exclude = "tests"
plugins = ["mypy_django_plugin.main"]

[tool.django-stubs]
django_settings_module = "ultihub.settings"

[tool.poe]
default_array_item_task_type = "cmd"

[tool.poe.tasks]
_run-dev = ["docker compose -f docker/compose.dev.yaml up -d", "python tests/wait_for_postgres.py"]
_stop-dev = "docker compose -f docker/compose.dev.yaml down"

[tool.poe.tasks.format]
help = "Run formating tools on the code base"
sequence = [
	"ruff check --select I001,F401 --fix-only .",
	"ruff format .",
	"npx prettier --write .",
]

[tool.poe.tasks.lint]
help = "Run linter"
cmd = "ruff check --no-fix --quiet --output-format=concise --force-exclude ."

[tool.poe.tasks.style]
help = "Validate code style"
sequence = ["ruff check --no-fix --select I001 .", "ruff format --check --diff ."]

[tool.poe.tasks.migrations-check]
help = "Check migrations"
sequence = [
	"docker compose -f docker/compose.test.yaml up -d",
	"python tests/wait_for_postgres.py",
	"poetry run python ultihub/manage.py makemigrations --check --dry-run",
	"docker compose -f docker/compose.test.yaml down"
]
ignore_fail = true
envfile = "secrets/.env.test"

[tool.poe.tasks.type]
help = "Run the mypy type checker"
cmd = "mypy ."
envfile = "secrets/.env.test"

[tool.poe.tasks.test]
help = "Run unit tests (without checks)"
sequence = [
	"docker compose -f docker/compose.test.yaml up -d",
	"python tests/wait_for_postgres.py",
	"pytest",
	"docker compose -f docker/compose.test.yaml down"
]
envfile = "secrets/.env.test"
ignore_fail = true

[tool.poe.tasks.migrate]
help = "Migrate the database"
sequence = [
	{ ref = "_run-dev"},
	"docker compose -f docker/compose.dev.yaml exec app python manage.py migrate",
	{ ref = "_stop-dev"},
]
ignore_fail = true

[tool.poe.tasks.makemigrations]
help = "Make migrations"
sequence = [
	{ ref = "_run-dev"},
	"docker compose -f docker/compose.dev.yaml exec app python manage.py makemigrations",
	{ ref = "_stop-dev"},
]
ignore_fail = true

[tool.poe.tasks.shell]
help = "Run a shell"
sequence = [
	{ ref = "_run-dev"},
	"docker compose -f docker/compose.dev.yaml exec app python manage.py shell",
	{ ref = "_stop-dev"},
]
ignore_fail = true

[tool.poe.tasks.loaddata]
help = "Load data from a fixture"
sequence = [
	{ ref = "_run-dev"},
	"docker compose -f docker/compose.dev.yaml exec app python manage.py loaddata initial_data",
	{ ref = "_stop-dev"},
]
ignore_fail = true
